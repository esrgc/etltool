@using ESRGC.Broadband.ETL.CensusBlock.Models
@model DataMappingModel
@{
    ViewBag.Title = "Field Mapping";
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $('form').validate({
            debug: true,
            highlight: function (label) {
                $(label).closest('.control-group').addClass('error');
                $(label).closest('.control-group').removeClass('success');
            },
            success: function (label) {
                label.text('OK!').addClass('valid')
                    .closest('.control-group').addClass('success');
            }
        });

        $('select').tooltip({
            toggle: "tooltip",
            placement: "right"
        });
    </script>
}
@section header{
    <h3>@ViewBag.Title</h3>
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("index", "Home")">
                Home</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("UploadFile", "Upload")">
                Upload</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("PreviewData", "Upload")">
                Data Preview</a><span class="divider">/</span>
        </li>
        <li class="active">@ViewBag.Title</li>
    </ul>
}
<!--Content-->
<div class="row-fluid">
    <div class="well span12">
        <h4>Instructions</h4>
        <ol>
            <li>
                Match each field/column with NTIA model field.
            </li>
            <li>
                Each field must be mapped to an uploaded data field.
            </li>
            <li>
                If the number of fields are not matched you must check your data and upload a new file.
            </li>
            <li>
                Click submit after all fields are mapped.
            </li>
        </ol>
    </div>
</div>
<div class="row-fluid">
    <div class="well span6">
        <h4>NTIA Data Mapping <span class="label label-important">
            ( * ) fields are required
        </span></h4>
        <br />
        <form class="form-horizontal" action="MapData" method="post">
        @Html.ValidationSummary(true)
        
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.PPROVNAMEColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.PPROVNAMEColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.PPROVNAMEColumn, ViewData).DisplayName
                        }
                )
                @Html.ValidationMessageFor(x => x.MappingObject.PPROVNAMEColumn)
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.DBANAMEColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.DBANAMEColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.DBANAMEColumn, ViewData).Description
                        }
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.Provider_typeColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.Provider_typeColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.Provider_typeColumn, ViewData).DisplayName
                        }
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.FRNColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.FRNColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.FRNColumn, ViewData).Description
                        }
                )
            </div>
        </div>
       @*<div class="control-group">
            @Html.LabelFor(x => x.MappingObject.STATEFIPSColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.STATEFIPSColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.STATEFIPSColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.COUNTYFIPSColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.COUNTYFIPSColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.COUNTYFIPSColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.TRACTColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.TRACTColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.TRACTColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.BLOCKIDColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.BLOCKIDColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.BLOCKIDColumn, ViewData).DisplayName
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.BLOCKSUBGROUPColumn, new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.BLOCKSUBGROUPColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.BLOCKSUBGROUPColumn, ViewData).DisplayName
                        }       
                )
            </div>
        </div>*@
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.FULLFIPSIDColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.FULLFIPSIDColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.FULLFIPSIDColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.TRANSTECHColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.TRANSTECHColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.TRANSTECHColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.MAXADDOWNColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.MAXADDOWNColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.MAXADDOWNColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.MAXADUPColumn, new { @class = "control-label field-required" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.MAXADUPColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large required",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.MAXADUPColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.TYPICDOWNColumn, new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.TYPICDOWNColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.TYPICDOWNColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => x.MappingObject.TYPICUPColumn, new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(
                        x => x.MappingObject.TYPICUPColumn,
                        new SelectList(Model.UploadDataColumns),
                        "--select a column--",
                        new { 
                            @class = "input-large",
                            Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                model => model.MappingObject.TYPICUPColumn, ViewData).Description
                        }       
                )
            </div>
        </div>
        <div class="form-actions">
            <input type="submit" class="btn btn-primary" />
            <input type="reset" class="btn" />
        </div>
        </form>
    </div>
    <div class="well span6">
        <h4>Previews</h4>
    </div>
</div>

