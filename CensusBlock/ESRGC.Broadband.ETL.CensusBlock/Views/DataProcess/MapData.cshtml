@using ESRGC.Broadband.ETL.CensusBlock.Models
@model DataMappingModel
@{
    ViewBag.Title = "Field Mapping";
}
@section scripts {
    @Scripts.Render(
        "~/bundles/jqueryval",
        "~/bundles/appBase",
        "~/bundles/mapDataApp"
    )
    <script type="text/javascript">
        $(function () {
            new ESRGC.App();
        });
    </script>
}
@section header{
    <h3>@ViewBag.Title <i class="icon-resize-horizontal"></i></h3>
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("index", "Home")">
                Home</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("UploadFile", "Upload")">
                Upload</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("PreviewData", "Upload")">
                Data Preview</a><span class="divider">/</span>
        </li>
        <li class="active">@ViewBag.Title</li>
    </ul>
}
<!--Content instructions-->
<div class="row-fluid">
    <div class="well span12">
        <h4>Instructions</h4>
        <ol>
            <li>
                Match each field/column with NTIA model field using the form below on the left. 
                <strong>Note that</strong> the system attemptted to map the matching fields. 
                Please make changes if neccessary.
            </li>
            <li>
                Each required (*) field must be mapped to an uploaded data field.
            </li>
            <li>
                If all the required fields are not mapped you must check your data and upload a new file.
            </li>
            <li>
                The preview panel on the right allows you to see the data mapped for particular fields.
                This panel will update along with the changes on the mapping form.
                Make sure the data is valid for the mapping field/column.
                If data for the field is empty or unavailable the data will be labeled as "Not available".               
                In that case, NTIA default values will apply if available, 
                otherwise, an error will be reported in the next step. 
            </li>
            <li>
                Non-required fields (<b>[TYPICAL UPLOAD]</b> and <b>[TYPICAL DOWNLOAD]</b>) are assigned with default
                value, specified by the NTIA model, if left unmapped.
            </li>
            <li>
                <strong>Important note</strong> <b>[STATE FIPS]</b>, <b>[COUNTY FIPS]</b>, and <b>[TRACT]</b> fields
                are parsed from <b>[FULL CENSUS BLOCK ID]</b> field. They are obscured from the form for this reason.
            </li>
            <li>
                After all required fields are mapped, click "Map Data" button to proceed.
                You can review your mapping on the next page.                
            </li>
        </ol>
    </div>
</div>
<div class="row-fluid">
    <div class="well span6">
        <h4>NTIA Data Mapping <span class="label label-important">
            ( * ) Required fields 
        </span></h4>
        <br />
        <div>   
            @Html.Hidden("firstRowData", ViewBag.firstRowData as string, new { name = "firstRowdata"})
            <form class="form-horizontal" action="@Url.Action("MapData")" method="post">
                @Html.ValidationSummary(true)
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.PROVNAMEColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                            x => x.MappingObject.PROVNAMEColumn,
                            new SelectList(Model.UploadDataColumns, 
                                Model.MappingObject.PROVNAMEColumn != null?
                                Model.MappingObject.PROVNAMEColumn :                                 
                                Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("PROVIDER NAME"))),
                            "--select a column--",
                            new { 
                                @class = "input-large required",
                                Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                    model => model.MappingObject.PROVNAMEColumn, ViewData).DisplayName
                            }
                        )
                        @Html.ValidationMessageFor(x => x.MappingObject.PROVNAMEColumn)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.DBANAMEColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.DBANAMEColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.DBANAMEColumn != null?
                                    Model.MappingObject.DBANAMEColumn :
                                    Model.UploadDataColumns.FirstOrDefault(x => x.ToUpper().Contains("DBA NAME"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.DBANAMEColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.Provider_typeColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.Provider_typeColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.Provider_typeColumn != null?
                                    Model.MappingObject.Provider_typeColumn :
                                    Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("PROVIDER TYPE"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.Provider_typeColumn, ViewData).DisplayName
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.FRNColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.FRNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.FRNColumn != null?
                                    Model.MappingObject.FRNColumn :
                                    Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("FRN"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.FRNColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.FULLFIPSIDColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.FULLFIPSIDColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.FULLFIPSIDColumn != null?
                                    Model.MappingObject.FULLFIPSIDColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                    x=>x.ToUpper().Contains("FIPS") ||
                                    x.ToUpper().Contains("FULL"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.FULLFIPSIDColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TRANSTECHColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TRANSTECHColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TRANSTECHColumn != null?
                                    Model.MappingObject.TRANSTECHColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                        x=>x.ToUpper().Contains("TRANSMISSION") 
                                        || x.ToUpper().Contains("TECHONOLOGY"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TRANSTECHColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.MAXADDOWNColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.MAXADDOWNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.MAXADDOWNColumn != null?
                                    Model.MappingObject.MAXADDOWNColumn : 
                                    Model.UploadDataColumns.FirstOrDefault(
                                        x=> (x.ToUpper().Contains("DOWN") ||
                                        x.ToUpper().Contains("DOWNLOAD")) &&
                                        (x.ToUpper().Contains("ADVERTISED") ||
                                        x.ToUpper().Contains("AD.")))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.MAXADDOWNColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.MAXADUPColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.MAXADUPColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.MAXADUPColumn != null?
                                    Model.MappingObject.MAXADUPColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                        x=> (x.ToUpper().Contains("UP") ||
                                        x.ToUpper().Contains("UPLOAD")) &&
                                        (x.ToUpper().Contains("ADVERTISED") ||
                                        x.ToUpper().Contains("AD.")))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.MAXADUPColumn, ViewData).Description
                                }       
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TYPICDOWNColumn, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TYPICDOWNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TYPICDOWNColumn != null?
                                    Model.MappingObject.TYPICDOWNColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                        x=> (x.ToUpper().Contains("DOWN") ||
                                        x.ToUpper().Contains("DOWNLOAD")) &&
                                        x.ToUpper().Contains("TYPICAL") ||
                                        x.ToUpper().Contains("TYPIC"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TYPICDOWNColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TYPICUPColumn, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TYPICUPColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TYPICUPColumn != null?
                                    Model.MappingObject.TYPICUPColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                        x=> (x.ToUpper().Contains("UP") ||
                                        x.ToUpper().Contains("UPLOAD")) &&
                                        x.ToUpper().Contains("TYPICAL") ||
                                        x.ToUpper().Contains("TYPIC"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TYPICUPColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
            
                <div class="form-actions">
                    <a class="btn" title="Back to data preview" 
                        href="@Url.Action("PreviewData", "Upload")">Back</a>
                    <input type="submit" value="Map Data" class="btn btn-primary" />
                    <input type="reset" class="btn" />
                
                </div>
            </form>
        </div>
    </div>
    <div class="well span6">
        <h4>Preview <small>(First row data)</small></h4>
        <br />
        <div class="" id="previewPanel">
            
            <table class="table table-hover">
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.PROVNAMEColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.DBANAMEColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.Provider_typeColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x=>x.MappingObject.FRNColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.FULLFIPSIDColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.TRANSTECHColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.MAXADDOWNColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.MAXADUPColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.TYPICDOWNColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => x.MappingObject.TYPICUPColumn)</td>
                    <td><span class="label">Not mapped</span></td>
                </tr>
            </table>
            <hr />
            <h5>Label description</h5>
            <p><span class="label">Not mapped</span> <i>Field has not been mapped.</i></p>
            <p><span class="label label-success">Data available</span> <i>Data is available.</i></p>
            <p><span class="label label-warning">Data unavailable</span> <i>Data is not available (null or empty). NTIA default values may apply.</i></p>
        </div>
    </div>
</div>

