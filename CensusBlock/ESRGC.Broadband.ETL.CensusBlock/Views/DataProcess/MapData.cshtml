@using ESRGC.Broadband.ETL.CensusBlock.Models
@model DataMappingModel
@{
    ViewBag.Title = "Field Mapping";
}
@section scripts {
    @Scripts.Render(
        "~/bundles/jqueryval",
        "~/bundles/appBase",
        "~/bundles/mapDataApp"
    )
}
@section header{
    <h3>@ViewBag.Title <i class="icon-resize-horizontal"></i></h3>
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("index", "Home")">
                Home</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("UploadFile", "Upload")">
                Upload</a><span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("PreviewData", "Upload")">
                Data Preview</a><span class="divider">/</span>
        </li>
        <li class="active">@ViewBag.Title</li>
    </ul>
}

@{
    var defaultProvName = Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("PROVIDER NAME"));
    var defaultDBA =   Model.UploadDataColumns.FirstOrDefault(x => x.ToUpper().Contains("DBA NAME"));
    var defaultProviderType = Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("PROVIDER TYPE"));
    var defaultFRN = Model.UploadDataColumns.FirstOrDefault(x=>x.ToUpper().Contains("FRN"));
    var defaultTransTech = Model.UploadDataColumns.FirstOrDefault(
                                        x=>x.ToUpper().Contains("TRANSMISSION") 
                                        || x.ToUpper().Contains("TECHONOLOGY"));
    var defaultMaxAdDown = Model.UploadDataColumns.FirstOrDefault(
                                        x => (x.ToUpper().Contains("DOWN") ||
                                        x.ToUpper().Contains("DOWNLOAD")) &&
                                        (x.ToUpper().Contains("ADVERTISED") ||
                                        x.ToUpper().Contains("AD.")));
    var defaultMaxAdUp = Model.UploadDataColumns.FirstOrDefault(
                                        x => (x.ToUpper().Contains("UP") ||
                                        x.ToUpper().Contains("UPLOAD")) &&
                                        (x.ToUpper().Contains("ADVERTISED") ||
                                        x.ToUpper().Contains("AD.")));
    var defaultTypicDown = Model.UploadDataColumns.FirstOrDefault(
                                        x => (x.ToUpper().Contains("DOWN") ||
                                        x.ToUpper().Contains("DOWNLOAD")) &&
                                        (x.ToUpper().Contains("TYPICAL") ||
                                        x.ToUpper().Contains("TYPIC")));
    var defaultTypicUp = Model.UploadDataColumns.FirstOrDefault(
                                        x => (x.ToUpper().Contains("UP") ||
                                        x.ToUpper().Contains("UPLOAD")) &&
                                        (x.ToUpper().Contains("TYPICAL") ||
                                        x.ToUpper().Contains("TYPIC")));                                                                                                                 
 }
<!--Content instructions-->
<div class="row-fluid">
    <div class="well span12">
        <h4>Instructions</h4>
        <ol>
            <li>
                Match each field/column with NTIA model field using the form below on the left. 
                <strong>Note that</strong> the system attemptted to map the matching fields. 
                Please make changes if neccessary.
            </li>
            <li>
                Each required (*) field must be mapped to an uploaded data field.
            </li>
            <li>
                If all the required fields are not mapped you must check your data and upload a new file
                or select <strong>"Use default"</strong> in the drop down box to enter a default value for that field.
                <strong>Note!</strong> not all fields can be mapped with a default value.
            </li>
            <li>
                The preview panel on the right allows you to see the data mapped for particular fields.
                This panel will update along with the changes on the mapping form.
                Make sure the data is valid for the mapping field/column.
                If data for the field is empty or unavailable the data will be labeled as "Not available".               
                In that case, NTIA default values will apply if available, 
                otherwise, an error will be reported in the next step. 
            </li>
            <li>
                Non-required fields (<b>[TYPICAL UPLOAD]</b> and <b>[TYPICAL DOWNLOAD]</b>) are assigned with default
                value ("ZZ"), specified by the NTIA model, if left unmapped.
            </li>
            <li>
                <strong>Important!</strong> <b>[STATE FIPS]</b>, <b>[COUNTY FIPS]</b>, and <b>[TRACT]</b> fields
                are parsed from <b>[FULL CENSUS BLOCK ID]</b> field. They are obscured from the form for this reason.
                <strong>These fields can not be mapped with default values.</strong>
            </li>
            <li>
                To see more information about coded values for the mapping fields, click on 
                <i class="icon-info-sign"></i> icons on the preview panel.
            </li>
            <li>
                After all required fields are mapped, click "Map Data" button to proceed.
                You can review your mapping on the next page.                
            </li>
        </ol>
    </div>
</div>
<div class="row-fluid">
    <div class="well span6">
        <div>
            <h4 style="display:inline-block; margin-top: 0">NTIA Data Mapping</h4>
            <span class="label label-important pull-right">( * ) Required fields </span>
        </div>
        <br />
        <div>   
            @Html.Hidden("firstRowData", ViewBag.firstRowData as string, new { name = "firstRowdata"})
            <form class="form-horizontal" action="@Url.Action("MapData")" method="post">
                <input type="hidden" value="@ViewBag.submissionID" id="submissionID" name="submissionID" />
                @Html.ValidationSummary()
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.PROVNAMEColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                            x => x.MappingObject.PROVNAMEColumn,
                            new SelectList(Model.UploadDataColumns, 
                                Model.MappingObject.PROVNAMEColumn != null?
                                Model.MappingObject.PROVNAMEColumn :                                 
                                string.IsNullOrEmpty(defaultProvName) ? "Use default" : defaultProvName
                                ),
                            "--select a column--",
                            new { 
                                @class = "input-large required",
                                Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                    model => model.MappingObject.PROVNAMEColumn, ViewData).DisplayName
                            }
                        )
                        @Html.TextBoxFor(x => x.DefaultData.PROVNAME, new { @class= "input-medium hide default-value-input"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.DBANAMEColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.DBANAMEColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.DBANAMEColumn != null?
                                    Model.MappingObject.DBANAMEColumn :
                                    string.IsNullOrEmpty(defaultDBA) ? "Use default" : defaultDBA
                                    ),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.DBANAMEColumn, ViewData).Description
                                }
                        )
                        @Html.TextBoxFor(x => x.DefaultData.DBANAME, new { @class= "input-medium hide default-value-input"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.Provider_typeColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.Provider_typeColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.Provider_typeColumn != null?
                                    Model.MappingObject.Provider_typeColumn :
                                    string.IsNullOrEmpty(defaultProviderType) ? "Use default" : defaultProviderType
                                    ),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.Provider_typeColumn, ViewData).DisplayName
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_Provider_Type" 
                                name="DefaultData.Provider_Type">
                            <option value="1">As described in the NOFA</option>
                            <option value="2">Reseller</option>
                            <option value="3">Other</option>
                        </select>
                         
                        @*@Html.TextBoxFor(x => x.DefaultData.Provider_Type, new { @class = "input-small hide default-value-input" })*@
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.FRNColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.FRNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.FRNColumn != null?
                                    Model.MappingObject.FRNColumn :
                                    string.IsNullOrEmpty(defaultFRN) ? "Use default" : defaultFRN
                                    ),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.FRNColumn, ViewData).Description
                                }
                        )
                        @Html.TextBoxFor(x => x.DefaultData.FRN, new { @class = "input-medium hide default-value-input" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.FULLFIPSIDColumn, new { @class = "control-label field-required" })
                    @{var list = Model.UploadDataColumns.ToList(); list.Remove("Use default");}
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.FULLFIPSIDColumn,
                                new SelectList(list,
                                    Model.MappingObject.FULLFIPSIDColumn != null?
                                    Model.MappingObject.FULLFIPSIDColumn :
                                    Model.UploadDataColumns.FirstOrDefault(
                                    x=>x.ToUpper().Contains("FIPS") ||
                                    x.ToUpper().Contains("FULL"))),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.FULLFIPSIDColumn, ViewData).Description
                                }
                        )
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TRANSTECHColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TRANSTECHColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TRANSTECHColumn != null?
                                    Model.MappingObject.TRANSTECHColumn : 
                                    string.IsNullOrEmpty(defaultTransTech) ? "Use default" : defaultTransTech
                                    ),
                                "--select a column--",
                                new { 
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TRANSTECHColumn, ViewData).Description
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_TRANSTECH" 
                                name="DefaultData.TRANSTECH">
                            <option value="10">Asymmetric xDSL</option>
                            <option value="20">Symmetric xDSL</option>
                            <option value="30">Other Copper Wireline</option>
                            <option value="40">Cable Modem - DOCSIS 3.0</option>
                            <option value="41">Cable Modem - Other</option>
                            <option value="50">Optical Carrier/Fiber to the End User</option>
                            <option value="60">Satellite</option>
                            <option value="70">Terrestrial Fixed Wireless - Unlicensed</option>
                            <option value="71">Terrestrial Fixed Wireless - Licensed</option>
                            <option value="80">Terrestrial Mobile Wireless</option>
                            <option value="90">Electric Power Line</option>
                            <option value="0">All other</option>
                        </select>
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.MAXADDOWNColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.MAXADDOWNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.MAXADDOWNColumn != null ?
                                    Model.MappingObject.MAXADDOWNColumn :
                                    string.IsNullOrEmpty(defaultMaxAdDown) ? "Use default" : defaultMaxAdDown),
                                "--select a column--",
                                new {
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.MAXADDOWNColumn, ViewData).Description
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_MAXADDOWN" 
                                name="DefaultData.MAXADDOWN">
                            <option value="3">Greater than or equal to 768 kbps and less than 1.5 mbps</option>
                            <option value="4">Greater than or equal to 1.5 mbps and less than 3 mbps</option>
                            <option value="5">Greater than or equal to 3 mbps and less than 6 mbps</option>
                            <option value="6">Greater than or equal to 6 mbps and less than 10 mbps</option>
                            <option value="7">Greater than or equal to 10 mbps and less than 25 mbps</option>
                            <option value="8">Greater than or equal to 25 mbps and less than 50 mbps</option>
                            <option value="9">Greater than or equal to 50 mbps and less than 100 mbps</option>
                            <option value="10">Greater than or equal to 100 mbps and less than 1 gbps</option>
                            <option value="11">Greater than or equal to 1 gbps</option>
                        </select>
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.MAXADUPColumn, new { @class = "control-label field-required" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.MAXADUPColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.MAXADUPColumn != null ?
                                    Model.MappingObject.MAXADUPColumn :
                                    string.IsNullOrEmpty(defaultMaxAdUp) ? "Use default" : defaultMaxAdUp
                                    ),
                                "--select a column--",
                                new {
                                    @class = "input-large required",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.MAXADUPColumn, ViewData).Description
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_MAXADUP" 
                                name="DefaultData.MAXADUP">
                            <option value="1">Less than or equal to 200 kpbs</option>
                            <option value="2">Greater than 200 kbps and less than 768 kbps</option>
                            <option value="3">Greater than or equal to 768 kbps and less than 1.5 mbps</option>
                            <option value="4">Greater than or equal to 1.5 mbps and less than 3 mbps</option>
                            <option value="5">Greater than or equal to 3 mbps and less than 6 mbps</option>
                            <option value="6">Greater than or equal to 6 mbps and less than 10 mbps</option>
                            <option value="7">Greater than or equal to 10 mbps and less than 25 mbps</option>
                            <option value="8">Greater than or equal to 25 mbps and less than 50 mbps</option>
                            <option value="9">Greater than or equal to 50 mbps and less than 100 mbps</option>
                            <option value="10">Greater than or equal to 100 mbps and less than 1 gbps</option>
                            <option value="11">Greater than or equal to 1 gbps</option>
                        </select>
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TYPICDOWNColumn, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TYPICDOWNColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TYPICDOWNColumn != null ?
                                    Model.MappingObject.TYPICDOWNColumn :
                                    string.IsNullOrEmpty(defaultTypicDown) ? "Use default" : defaultTypicDown
                                ),
                                "--select a column--",
                                new {
                                    @class = "input-large",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TYPICDOWNColumn, ViewData).Description
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_TYPICDOWN" 
                                name="DefaultData.TYPICDOWN">
                            <option value="3">Greater than or equal to 768 kbps and less than 1.5 mbps</option>
                            <option value="4">Greater than or equal to 1.5 mbps and less than 3 mbps</option>
                            <option value="5">Greater than or equal to 3 mbps and less than 6 mbps</option>
                            <option value="6">Greater than or equal to 6 mbps and less than 10 mbps</option>
                            <option value="7">Greater than or equal to 10 mbps and less than 25 mbps</option>
                            <option value="8">Greater than or equal to 25 mbps and less than 50 mbps</option>
                            <option value="9">Greater than or equal to 50 mbps and less than 100 mbps</option>
                            <option value="10">Greater than or equal to 100 mbps and less than 1 gbps</option>
                            <option value="11">Greater than or equal to 1 gbps</option>
                        </select>
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.MappingObject.TYPICUPColumn, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(
                                x => x.MappingObject.TYPICUPColumn,
                                new SelectList(Model.UploadDataColumns,
                                    Model.MappingObject.TYPICUPColumn != null ?
                                    Model.MappingObject.TYPICUPColumn :
                                    string.IsNullOrEmpty(defaultTypicUp) ? "Use default" : defaultTypicUp
                                    ),
                                "--select a column--",
                                new {
                                    @class = "input-large",
                                    Title = ModelMetadata.FromLambdaExpression<DataMappingModel, string>(
                                        model => model.MappingObject.TYPICUPColumn, ViewData).Description
                                }
                        )
                        <select class="input-large hide default-value-input" 
                                id="DefaultData_TYPICUP" 
                                name="DefaultData.TYPICUP">
                            <option value="1">Less than or equal to 200 kpbs</option>
                            <option value="2">Greater than 200 kbps and less than 768 kbps</option>
                            <option value="3">Greater than or equal to 768 kbps and less than 1.5 mbps</option>
                            <option value="4">Greater than or equal to 1.5 mbps and less than 3 mbps</option>
                            <option value="5">Greater than or equal to 3 mbps and less than 6 mbps</option>
                            <option value="6">Greater than or equal to 6 mbps and less than 10 mbps</option>
                            <option value="7">Greater than or equal to 10 mbps and less than 25 mbps</option>
                            <option value="8">Greater than or equal to 25 mbps and less than 50 mbps</option>
                            <option value="9">Greater than or equal to 50 mbps and less than 100 mbps</option>
                            <option value="10">Greater than or equal to 100 mbps and less than 1 gbps</option>
                            <option value="11">Greater than or equal to 1 gbps</option>
                        </select>
                    </div>
                </div>                               
                <!--Form actions-->
                <div class="form-actions">
                    <a class="btn" title="Back to data preview" 
                        href="@Url.Action("PreviewData", "Upload")">Back</a>
                    <input type="submit" value="Map Data" class="btn btn-primary" />                                  
                </div>
            </form>
        </div>
    </div>
    <div class="well span6">
        <h4>Preview <small>(First row data)</small></h4>
        <br />
        <div class="" id="previewPanel">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>Field</th>
                        <th>Mapped Value</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Html.LabelFor(x => x.MappingObject.PROVNAMEColumn)</td>
                        <td><span class="label">Not mapped</span></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(x => x.MappingObject.DBANAMEColumn)</td>
                        <td><span class="label">Not mapped</span></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(x => x.MappingObject.Provider_typeColumn)</td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Provider type code detail" data-toggle="modal"
                                data-target="#providerTypes"><i class="icon-info-sign"></i>
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(x => x.MappingObject.FRNColumn)</td>
                        <td><span class="label">Not mapped</span></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(x => x.MappingObject.FULLFIPSIDColumn)</td>
                        <td><span class="label">Not mapped</span></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.MappingObject.TRANSTECHColumn)
                        </td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Technology of transmission code detail"
                                data-toggle="modal" data-target="#transmitTech"><i class="icon-info-sign">
                                </i>
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.MappingObject.MAXADDOWNColumn)
                        </td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Speed tier code detail" data-toggle="modal"
                                data-target="#speedCodes"><i class="icon-info-sign"></i>
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.MappingObject.MAXADUPColumn)
                        </td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Speed tier code detail" data-toggle="modal"
                                data-target="#speedCodes"><i class="icon-info-sign"></i>
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.MappingObject.TYPICDOWNColumn)
                        </td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Speed tier code detail" data-toggle="modal"
                                data-target="#speedCodes"><i class="icon-info-sign"></i>
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.MappingObject.TYPICUPColumn)
                        </td>
                        <td><span class="label">Not mapped</span></td>
                        <td>
                            <a class="btn btn-mini" title="Speed tier code detail" data-toggle="modal"
                                data-target="#speedCodes"><i class="icon-info-sign"></i>
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
            <hr />
            <h5>Label description</h5>
            <p><span class="label">Not mapped</span> <i>Field has not been mapped.</i></p>
            <p><span class="label label-success">Data available</span> <i>Data is available.</i></p>
            <p><span class="label label-warning">Data unavailable</span> <i>Data is not available (null or empty). NTIA default values may apply.</i></p>
        </div>
    </div>
</div>
<!--Prompt user to wait when data is being mapped-->
<div class="modal hide fade" data-backdrop="static" tabindex="-1"
    id="progressPanel" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-header">
        <h3 id="modalLabel">Mapping Data</h3>
    </div>
    <div class="modal-body">
        <label>
            Your data is being mapped. Please wait...
            <img src="@Url.Content("~/Content/images/ajax-loader.gif")" alt="" 
                    style="padding: 10px; width:20px;">
        </label>
        <div class="progress progress-striped active">
            <div class="bar" style="width: 100%;">
            </div>
        </div>
    </div>
    <div class="modal-footer">
    </div>
</div>

<div class="modal hide fade" id="transmitTech">
    <div class="modal-header"><h3>Technology of Transmission</h3></div>
    <div class="modal-body">
        @Html.Partial("TechOfTrans")
    </div>
    <div class="modal-footer"></div>
</div>

<div class="modal hide fade" id="speedCodes">
    <div class="modal-header"><h3>Speed Tier Codes</h3></div>
    <div class="modal-body">
        @Html.Partial("SpeedTierCodes")
    </div>
    <div class="modal-footer"></div>
</div>

<div class="modal hide fade" id="providerTypes">
    <div class="modal-header"><h3>Provider Type Codes</h3></div>
    <div class="modal-body">
        @Html.Partial("ProviderTypes")
    </div>
    <div class="modal-footer"></div>
</div>